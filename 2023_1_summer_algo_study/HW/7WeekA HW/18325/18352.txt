어떤 나라에는 1번부터 N번까지의 도시와 M개의 단방향 도로가 존재한다. 모든 도로의 거리는 1이다.

이 때 특정한 도시 X로부터 출발하여 도달할 수 있는 모든 도시 중에서, 최단 거리가 정확히 K인 모든 도시들의 번호를 출력하는 프로그램을 작성하시오.
또한 출발 도시 X에서 출발 도시 X로 가는 최단 거리는 항상 0이라고 가정한다.

예를 들어 N=4, K=2, X=1일 때 다음과 같이 그래프가 구성되어 있다고 가정하자.

문제 풀이 방법
1. bfs 알고리즘을 이용해 시작지점 부터 인접 도시 까지 거리를 계속 구한다.
2. 방문 배열을 만들어 업데이트 한다.
3. 갱신마다 거리를 1씩 늘린다.

의사코드 구현

bfs 코드//


        visited[start] = 0;
        Queue<Integer> q = new LinkedList<>();
        q.offer(start); // 시작 도시를 큐에넣으며 시작

        while (!q.isEmpty()) {
            int cv = q.poll();
            // 현재 도시와 인접한 도시들에 대해서
            // 방문한적이 없는경우 (즉 -1)이면 방문하고, 현재 도시에서 +1 해준 값으로
            // 거리를 업데이트한다.
            for (int i : graph.get(cv)) {
                if (visited[i] == -1) {
                    visited[i] = visited[cv] + 1;
                    q.offer(i);
                }
            }
        }



코드 구현


import java.util.*;

class j18325 {
    static int[] visited;
    static ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
    static int n,k,x,m;
    static int count;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt(); // 도시 개수
        m = sc.nextInt(); // 도로 개수
        k = sc.nextInt(); // 거리 정보
        x = sc.nextInt(); // 시작 도시

        // 그래프 초기화
        for (int i=0; i<=n; i++) {
            graph.add(new ArrayList<>());
        }

        // 방문배열 초기화
        visited = new int[n+1];
        for (int i=0; i<=n; i++) {
            visited[i] = -1;
        }

        // 도시 정보 입력받기
        // 단방향
        for (int i=0; i<m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            graph.get(a).add(b);
        }

        BFS(x);

        boolean flag = false;
        // 방문배열의 인덱스에는 도시별 거리가 저장되기 때문에
        // k만큼의 거리인 인덱스를 찾으면 됨
        for (int i=1; i<=n; i++) {
            if (visited[i] == k) {
                System.out.println(i);
                flag = true;
            }
        }
        if (!flag) System.out.println("-1");

    }

    public static void BFS(int start) {
        // 시작도시에서 시작도시까지의 거리는 0이다. (1 -> 1로 가는 거리는 0)
        visited[start] = 0;
        Queue<Integer> q = new LinkedList<>();
        q.offer(start); // 시작 도시를 큐에넣으며 시작

        while (!q.isEmpty()) {
            int cv = q.poll();
            // 현재 도시와 인접한 도시들에 대해서
            // 방문한적이 없는경우 (즉 -1)이면 방문하고, 현재 도시에서 +1 해준 값으로
            // 거리를 업데이트한다.
            for (int i : graph.get(cv)) {
                if (visited[i] == -1) {
                    visited[i] = visited[cv] + 1;
                    q.offer(i);
                }
            }
        }

    }
}
