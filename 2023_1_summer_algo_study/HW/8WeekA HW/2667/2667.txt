이 문제는  2667 단지 번호 붙이기 문제로 
<그림 1>과 같이 정사각형 모양의 지도가 있다. 1은 집이 있는 곳을, 0은 집이 없는 곳을 나타낸다. 
철수는 이 지도를 가지고 연결된 집의 모임인 단지를 정의하고, 단지에 번호를 붙이려 한다. 
여기서 연결되었다는 것은 어떤 집이 좌우, 혹은 아래위로 다른 집이 있는 경우를 말한다. 대각선상에 집이 있는 경우는 연결된 것이 아니다. <그림 2>는 <그림 1>을 단지별로 번호를 붙인 것이다. 지도를 입력하여 단지수를 출력하고, 각 단지에 속하는 집의 수를 오름차순으로 정렬하여 출력하는 프로그램을 작성하시오.

N *N 개의 사각형을 만들어 0 과 1로 체운다. 
0 은 도로 1은 아파트로 0 과 1을 분리하고 각 각 분리된 단지수를 구하고 단지에 있ㄴ믄 세대수를 출력함

이 문제는 큐를 이용한 BFS로 풀 수 있다.


의사코드 구현

지도를 만들고 출력한다.   BFS
bfs(boolean[][] visited, int[][] dangi, int countNum) {
  
        int[] dx = {0, 0, 1, -1};  
        int[] dy = {1, -1, 0, 0};

        while(!q.isEmpty()){
            Node out = q.poll();
            dangi[out.x][out.y] = out.count;
            visited[out.x][out.y] = true;
            countNum += 1;

            for(int k=0; k<4; k++){
                int x = out.x + dx[k];
                int y = out.y + dy[k];
                if(x>=0 && y>=0 && x<dangi.length && y<dangi[0].length) {
                    if(visited[x][y] == false && dangi[x][y] == 1){
                        q.add(new Node(x, y, out.count));
                    }
                }
            }
        }

        return countNum;
    }
    

    방문한지 판별하는 코드
            boolean[][] visited  = new boolean[N][N];

    자바 구현
    import java.util.*;


public class j2667 {
    static Queue<Node> q = new LinkedList<>();

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

  
        int N = sc.nextInt();
        sc.nextLine();

  
        int[][] dangi = new int[N][N];

        boolean[][] visited  = new boolean[N][N];



        for(int i=0; i<N; i++){
            String str = sc.nextLine();
            for(int j=0; j<N; j++){
                dangi[i][j] = str.charAt(j) - 48;
            }
        }

        for(int i=0; i<dangi.length; i++){
            String str = sc.nextLine();
            for(int j=0; j<str.length(); j++){
                dangi[i][j] = str.charAt(j) - 48;
            }
        }

        int count = 0;
        List<Integer> dangiNum = new ArrayList<>();
        for(int i=0; i<dangi.length; i++){
            for(int j=0; j<dangi[0].length; j++){
                if(visited[i][j] == false && dangi[i][j] == 1) {
                    count++;
                    q.add(new Node(i, j, count));
                    visited[i][j] = true;
                    int tmp = bfs(visited, dangi, 0);
                    dangiNum.add(tmp);
                }
            }
        }

        System.out.println(dangiNum.size());
        Collections.sort(dangiNum);
        for(int i=0; i<dangiNum.size(); i++){
            System.out.println(dangiNum.get(i));
        }
    }

    public static int bfs(boolean[][] visited, int[][] dangi, int countNum) {

        int[] dx = {0, 0, 1, -1};
        int[] dy = {1, -1, 0, 0};

        while(!q.isEmpty()){
            Node out = q.poll();
            dangi[out.x][out.y] = out.count;
            visited[out.x][out.y] = true;
            countNum += 1;

            for(int k=0; k<4; k++){
                int x = out.x + dx[k];
                int y = out.y + dy[k];
                if(x>=0 && y>=0 && x<dangi.length && y<dangi[0].length) {
                    if(visited[x][y] == false && dangi[x][y] == 1){
                        q.add(new Node(x, y, out.count));
                    }
                }
            }
        }

        return countNum;
    }

    static class Node{
        int x;
        int y;
        int count;
        
        public Node(int x, int y, int count){
            this.x = x;
            this.y = y;
            this.count = count;
        }
    }
}